package nl.renarj.jasdb.index.btreeplus;

import nl.renarj.jasdb.core.exceptions.JasDBStorageException;
import nl.renarj.jasdb.index.Index;
import nl.renarj.jasdb.index.IndexState;
import nl.renarj.jasdb.index.keys.impl.LongKey;
import nl.renarj.jasdb.index.keys.impl.StringKey;
import nl.renarj.jasdb.index.keys.keyinfo.KeyInfo;
import nl.renarj.jasdb.index.keys.keyinfo.KeyInfoImpl;
import nl.renarj.jasdb.index.keys.types.LongKeyType;
import nl.renarj.jasdb.index.keys.types.StringKeyType;
import nl.renarj.jasdb.index.search.EqualsCondition;
import nl.renarj.jasdb.index.search.IndexField;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

/**
 * @author Renze de Vries
 */
public class BtreeCloseOpenTest extends IndexBaseTest {

    @Before
    public void setup() {
        cleanData();
    }

    @After
    public void tearDown() {
        cleanData();
    }

    @Test(expected = JasDBStorageException.class)
    public void testIndexClose() throws Exception {
        KeyInfo keyInfo = new KeyInfoImpl(new IndexField("string", new StringKeyType(100)), new IndexField(RECORD_POINTER, new LongKeyType()));
        BTreeIndex index = new BTreeIndex(new File(tmpDir, "indexbag_string.idx"), keyInfo);
        for(int i=0; i<10; i++) {
            index.insertIntoIndex(new StringKey("somekey" + i).addKey(keyInfo.getKeyNameMapper(), RECORD_POINTER, new LongKey(i)));
        }

        index.close();
        Assert.assertEquals("Index state should be closed", IndexState.CLOSED, index.getState());
        index.searchIndex(new EqualsCondition(new StringKey("somekey0")), Index.NO_SEARCH_LIMIT);
    }

    @Test
    public void testIndexCloseOpenCountTest() throws Exception {
        KeyInfo keyInfo = new KeyInfoImpl(new IndexField("string", new StringKeyType(100)), new IndexField(RECORD_POINTER, new LongKeyType()));
        File indexFile = new File(tmpDir, "indexbag_string.idx");
        BTreeIndex index = new BTreeIndex(indexFile, keyInfo);
        for(int i=0; i<10; i++) {
            index.insertIntoIndex(new StringKey("somekey" + i).addKey(keyInfo.getKeyNameMapper(), RECORD_POINTER, new LongKey(i)));
        }

        try {
            index.close();

            index = new BTreeIndex(indexFile, keyInfo);
            index.openIndex();

            assertThat(index.count(), is(10l));
        } finally {
            index.close();
        }
    }

    @Test
    public void testIndexRemove() throws Exception {
        KeyInfo keyInfo = new KeyInfoImpl(new IndexField("string", new StringKeyType(100)), new IndexField(RECORD_POINTER, new LongKeyType()));
        File indexFile = new File(tmpDir, "indexbag_string.idx");
        BTreeIndex index = new BTreeIndex(indexFile, keyInfo);
        for(int i=0; i<10; i++) {
            index.insertIntoIndex(new StringKey("somekey" + i).addKey(keyInfo.getKeyNameMapper(), RECORD_POINTER, new LongKey(i)));
        }
        Assert.assertTrue("Index file should exist", indexFile.exists());
        index.removeIndex();
        Assert.assertEquals("Index state should be closed", IndexState.CLOSED, index.getState());
        Assert.assertFalse("Index file should no longer exist", indexFile.exists());
    }
}
